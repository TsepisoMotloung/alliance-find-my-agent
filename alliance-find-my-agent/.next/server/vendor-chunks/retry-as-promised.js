"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/retry-as-promised";
exports.ids = ["vendor-chunks/retry-as-promised"];
exports.modules = {

/***/ "(rsc)/./node_modules/retry-as-promised/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/retry-as-promised/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.retryAsPromised = exports.applyJitter = exports.TimeoutError = void 0;\nclass TimeoutError extends Error {\n    constructor(message, previousError) {\n        super(message);\n        this.name = \"TimeoutError\";\n        this.previous = previousError;\n    }\n}\nexports.TimeoutError = TimeoutError;\nfunction matches(match, err) {\n    if (typeof match === 'function') {\n        try {\n            if (err instanceof match)\n                return true;\n        }\n        catch (_) {\n            return !!match(err);\n        }\n    }\n    if (match === err.toString())\n        return true;\n    if (match === err.message)\n        return true;\n    return match instanceof RegExp\n        && (match.test(err.message) || match.test(err.toString()));\n}\nfunction applyJitter(delayMs, maxJitterMs) {\n    const newDelayMs = delayMs + (Math.random() * maxJitterMs * (Math.random() > 0.5 ? 1 : -1));\n    return Math.max(0, newDelayMs);\n}\nexports.applyJitter = applyJitter;\nfunction retryAsPromised(callback, optionsInput) {\n    if (!callback || !optionsInput) {\n        throw new Error('retry-as-promised must be passed a callback and a options set');\n    }\n    optionsInput = (typeof optionsInput === \"number\" ? { max: optionsInput } : optionsInput);\n    const options = {\n        $current: \"$current\" in optionsInput ? optionsInput.$current : 1,\n        max: optionsInput.max,\n        timeout: optionsInput.timeout || undefined,\n        match: optionsInput.match ? Array.isArray(optionsInput.match) ? optionsInput.match : [optionsInput.match] : [],\n        backoffBase: optionsInput.backoffBase === undefined ? 100 : optionsInput.backoffBase,\n        backoffExponent: optionsInput.backoffExponent || 1.1,\n        backoffJitter: optionsInput.backoffJitter || 0.0,\n        report: optionsInput.report,\n        name: optionsInput.name || callback.name || 'unknown'\n    };\n    if (options.match && !Array.isArray(options.match))\n        options.match = [options.match];\n    if (options.report)\n        options.report('Trying ' + options.name + ' #' + options.$current + ' at ' + new Date().toLocaleTimeString(), options);\n    return new Promise(function (resolve, reject) {\n        let timeout;\n        let backoffTimeout;\n        let lastError;\n        if (options.timeout) {\n            timeout = setTimeout(function () {\n                if (backoffTimeout)\n                    clearTimeout(backoffTimeout);\n                reject(new TimeoutError(options.name + ' timed out', lastError));\n            }, options.timeout);\n        }\n        Promise.resolve(callback({ current: options.$current }))\n            .then(resolve)\n            .then(function () {\n            if (timeout)\n                clearTimeout(timeout);\n            if (backoffTimeout)\n                clearTimeout(backoffTimeout);\n        })\n            .catch(function (err) {\n            if (timeout)\n                clearTimeout(timeout);\n            if (backoffTimeout)\n                clearTimeout(backoffTimeout);\n            lastError = err;\n            if (options.report)\n                options.report((err && err.toString()) || err, options, err);\n            // Should not retry if max has been reached\n            var shouldRetry = options.$current < options.max;\n            if (!shouldRetry)\n                return reject(err);\n            shouldRetry = options.match.length === 0 || options.match.some(function (match) {\n                return matches(match, err);\n            });\n            if (!shouldRetry)\n                return reject(err);\n            var retryDelay = options.backoffBase * Math.pow(options.backoffExponent, options.$current - 1);\n            const backoffJitter = options.backoffJitter;\n            if (backoffJitter !== undefined) {\n                retryDelay = applyJitter(retryDelay, backoffJitter);\n            }\n            // Do some accounting\n            options.$current++;\n            if (options.report)\n                options.report(`Retrying ${options.name} (${options.$current})`, options);\n            if (retryDelay) {\n                // Use backoff function to ease retry rate\n                if (options.report)\n                    options.report(`Delaying retry of ${options.name} by ${retryDelay}`, options);\n                backoffTimeout = setTimeout(function () {\n                    retryAsPromised(callback, options)\n                        .then(resolve)\n                        .catch(reject);\n                }, retryDelay);\n            }\n            else {\n                retryAsPromised(callback, options)\n                    .then(resolve)\n                    .catch(reject);\n            }\n        });\n    });\n}\nexports.retryAsPromised = retryAsPromised;\n;\nexports[\"default\"] = retryAsPromised;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/retry-as-promised/dist/index.js\n");

/***/ })

};
;